rename(flood = RANGE) %>%
mutate(flood = factor(flood))
# 1 = flood, 0 = no flood
#1 Elevation
elev_comb <- elevation %>%
select(FID, MEAN) %>%
rename(mean_elev= MEAN)
#2 Slope
slope_comb <- slope %>%
select(FID, MAX) %>%
rename(max_slope= MAX)
#3 Water body
water_comb <- water_body %>%
select(FID, MIN) %>%
rename(min_dist_water= MIN)
#4 Flow accumulation
fac_comb <-  flow_acc %>%
select(FID, MEAN) %>%
rename(mean_fac= MEAN)
#changed from max to mean
#5 Land Use/Permeability
lu_comb <- land_use %>%
select(FID, MEAN) %>%
rename(land_use = MEAN) %>%
mutate(permeability = case_when(
land_use < 0.25 ~ '0',
land_use >= 0.25 ~ '1')) %>%
select(-land_use)
# Removing unnecessary data sets
rm(inundation, elevation, flow_acc, land_use, slope, water_body)
# Combining the tables
flood_comb <- flood_dep %>%
inner_join(elev_comb, by = "FID") %>%
inner_join(slope_comb, by = "FID") %>%
inner_join(water_comb, by = "FID") %>%
inner_join(fac_comb, by = "FID")
floodPlotVariables <-
flood_comb %>%
as.data.frame() %>%
select(flood, mean_elev, max_slope, min_dist_water, mean_fac) %>%
gather(variable, value, -flood)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(tidyverse)
library(sf)
library(raster)
library(knitr)
library(kableExtra)
library(tidycensus)
library(tigris)
library(FNN)
library(tiff)
#library(QuantPsyc) # JE Note: in R 4.1, QuantPsyc package not available.
library(caret)
library(yardstick)
library(pscl)
library(plotROC)
library(ggrepel)
library(pROC)
library(grid)
library(gridExtra)
library(viridis)
library(igraph)
plotTheme <- theme(
plot.title =element_text(size=12),
plot.subtitle = element_text(size=8),
plot.caption = element_text(size = 6),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.text.y = element_text(size = 10),
axis.title.y = element_text(size = 10),
# Set the entire chart region to blank
panel.background=element_blank(),
plot.background=element_blank(),
#panel.border=element_rect(colour="#F0F0F0"),
# Format the grid
panel.grid.major=element_line(colour="#D0D0D0",size=.75),
axis.ticks=element_blank())
mapTheme <- theme(plot.title =element_text(size=12),
plot.subtitle = element_text(size=8),
plot.caption = element_text(size = 6),
axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_line(colour = 'transparent'),
panel.grid.minor=element_blank(),
legend.direction = "vertical",
legend.position = "right",
plot.margin = margin(1, 1, 1, 1, 'cm'),
legend.key.height = unit(1, "cm"), legend.key.width = unit(0.2, "cm"))
palette2 <- c("#41b6c4","#253494")
palette4 <- c("#a1dab4","#41b6c4","#2c7fb8","#253494")
palette5 <- c("#ffffcc","#a1dab4","#41b6c4","#2c7fb8","#253494")
palette10 <- c("#f7fcf0","#e0f3db","#ccebc5","#a8ddb5","#7bccc4",
"#4eb3d3","#2b8cbe","#0868ac","#084081","#f7fcf0")
#this function converts a column in to quintiles. It is used for mapping.
quintileBreaks <- function(df,variable) {
as.character(quantile(df[[variable]],
c(.01,.2,.4,.6,.8),na.rm=T))
}
#This function can be used to convert a polygon sf to centroids xy coords.
xyC <- function(aPolygonSF) {
as.data.frame(
cbind(x=st_coordinates(st_centroid(aPolygonSF))[,1],
y=st_coordinates(st_centroid(aPolygonSF))[,2]))
}
#this function convert a raster to a data frame so it can be plotted in ggplot
rast <- function(inRaster) {
data.frame(
xyFromCell(inRaster, 1:ncell(inRaster)),
value = getValues(inRaster)) }
njMSA <-
st_read("/Users/luyiiwong/Documents/GitHub/LandUseModeling_HW5/Data/NJ_Counties_3424_6106433824930826716.geojson")
lc_change = raster("/Users/luyiiwong/Documents/GitHub/LandUseModeling_HW5/Data/nlcd_nj.tif")
selected_counties <- c("Bergen County", "Hudson County", "Passaic County" ,
"Middlesex County", "Monmouth County", "Ocean County",
"Somerset County", "Essex County", "Union County",
"Morris County", "Sussex County", "Hunterdon County",
"Mercer County", "Warren County")
njMSA <- njMSA %>%
filter(COUNTY_LABEL %in% selected_counties2)
njMSA <- njMSA %>%
filter(COUNTY_LABEL %in% selected_counties)
ggplot() +
geom_sf(data=njMSA) +
geom_raster(data=rast(lc_change) %>% na.omit %>% filter(value > 0),
aes(x,y,fill=as.factor(value))) +
scale_fill_viridis(direction = -1, discrete=TRUE, name ="Land Cover\nChange") +
labs(title = "Land Cover Change, 2011-2021") +
mapTheme +
theme(legend.direction="horizontal")
setwd("/Users/luyiiwong/Documents/GitHub/LandUseModeling_HW5")
setwd("/Users/luyiiwong/Documents/GitHub/LandUseModeling_HW5/Data")
njMSA <-
st_read("nj_counties_msa.geojson")
setwd("/Users/luyiiwong/Documents/GitHub/LandUseModeling_HW5/Data")
njMSA <-
st_read("nj_counties_msa.geojson")
njMSA <- st_read("/Users/luyiiwong/Documents/GitHub/LandUseModeling_HW5/Data/nj_counties_msa.geojsonn")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(tidyverse)
library(sf)
library(raster)
library(knitr)
library(kableExtra)
library(tidycensus)
library(tigris)
library(FNN)
library(tiff)
#library(QuantPsyc) # JE Note: in R 4.1, QuantPsyc package not available.
library(caret)
library(yardstick)
library(pscl)
library(plotROC)
library(ggrepel)
library(pROC)
library(grid)
library(gridExtra)
library(viridis)
library(igraph)
plotTheme <- theme(
plot.title =element_text(size=12),
plot.subtitle = element_text(size=8),
plot.caption = element_text(size = 6),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.text.y = element_text(size = 10),
axis.title.y = element_text(size = 10),
# Set the entire chart region to blank
panel.background=element_blank(),
plot.background=element_blank(),
#panel.border=element_rect(colour="#F0F0F0"),
# Format the grid
panel.grid.major=element_line(colour="#D0D0D0",size=.75),
axis.ticks=element_blank())
mapTheme <- theme(plot.title =element_text(size=12),
plot.subtitle = element_text(size=8),
plot.caption = element_text(size = 6),
axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_line(colour = 'transparent'),
panel.grid.minor=element_blank(),
legend.direction = "vertical",
legend.position = "right",
plot.margin = margin(1, 1, 1, 1, 'cm'),
legend.key.height = unit(1, "cm"), legend.key.width = unit(0.2, "cm"))
palette2 <- c("#41b6c4","#253494")
palette4 <- c("#a1dab4","#41b6c4","#2c7fb8","#253494")
palette5 <- c("#ffffcc","#a1dab4","#41b6c4","#2c7fb8","#253494")
palette10 <- c("#f7fcf0","#e0f3db","#ccebc5","#a8ddb5","#7bccc4",
"#4eb3d3","#2b8cbe","#0868ac","#084081","#f7fcf0")
#this function converts a column in to quintiles. It is used for mapping.
quintileBreaks <- function(df,variable) {
as.character(quantile(df[[variable]],
c(.01,.2,.4,.6,.8),na.rm=T))
}
#This function can be used to convert a polygon sf to centroids xy coords.
xyC <- function(aPolygonSF) {
as.data.frame(
cbind(x=st_coordinates(st_centroid(aPolygonSF))[,1],
y=st_coordinates(st_centroid(aPolygonSF))[,2]))
}
#this function convert a raster to a data frame so it can be plotted in ggplot
rast <- function(inRaster) {
data.frame(
xyFromCell(inRaster, 1:ncell(inRaster)),
value = getValues(inRaster)) }
njMSA <- st_read("/Users/luyiiwong/Documents/GitHub/LandUseModeling_HW5/Data/nj_counties_msa.geojsonn")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(tidyverse)
library(sf)
library(raster)
library(knitr)
library(kableExtra)
library(tidycensus)
library(tigris)
library(FNN)
library(tiff)
#library(QuantPsyc) # JE Note: in R 4.1, QuantPsyc package not available.
library(caret)
library(yardstick)
library(pscl)
library(plotROC)
library(ggrepel)
library(pROC)
library(grid)
library(gridExtra)
library(viridis)
library(igraph)
plotTheme <- theme(
plot.title =element_text(size=12),
plot.subtitle = element_text(size=8),
plot.caption = element_text(size = 6),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.text.y = element_text(size = 10),
axis.title.y = element_text(size = 10),
# Set the entire chart region to blank
panel.background=element_blank(),
plot.background=element_blank(),
#panel.border=element_rect(colour="#F0F0F0"),
# Format the grid
panel.grid.major=element_line(colour="#D0D0D0",size=.75),
axis.ticks=element_blank())
mapTheme <- theme(plot.title =element_text(size=12),
plot.subtitle = element_text(size=8),
plot.caption = element_text(size = 6),
axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_line(colour = 'transparent'),
panel.grid.minor=element_blank(),
legend.direction = "vertical",
legend.position = "right",
plot.margin = margin(1, 1, 1, 1, 'cm'),
legend.key.height = unit(1, "cm"), legend.key.width = unit(0.2, "cm"))
palette2 <- c("#41b6c4","#253494")
palette4 <- c("#a1dab4","#41b6c4","#2c7fb8","#253494")
palette5 <- c("#ffffcc","#a1dab4","#41b6c4","#2c7fb8","#253494")
palette10 <- c("#f7fcf0","#e0f3db","#ccebc5","#a8ddb5","#7bccc4",
"#4eb3d3","#2b8cbe","#0868ac","#084081","#f7fcf0")
#this function converts a column in to quintiles. It is used for mapping.
quintileBreaks <- function(df,variable) {
as.character(quantile(df[[variable]],
c(.01,.2,.4,.6,.8),na.rm=T))
}
#This function can be used to convert a polygon sf to centroids xy coords.
xyC <- function(aPolygonSF) {
as.data.frame(
cbind(x=st_coordinates(st_centroid(aPolygonSF))[,1],
y=st_coordinates(st_centroid(aPolygonSF))[,2]))
}
#this function convert a raster to a data frame so it can be plotted in ggplot
rast <- function(inRaster) {
data.frame(
xyFromCell(inRaster, 1:ncell(inRaster)),
value = getValues(inRaster)) }
njMSA <- st_read("/Users/luyiiwong/Documents/GitHub/LandUseModeling_HW5/Data/nj_counties_msa.geojson")
lc_change = raster("/Users/luyiiwong/Documents/GitHub/LandUseModeling_HW5/Data/nlcd_nj_msa/nlcd_nj_msa.tif")
ggplot() +
geom_sf(data=njMSA) +
geom_raster(data=rast(lc_change) %>% na.omit %>% filter(value > 0),
aes(x,y,fill=as.factor(value))) +
scale_fill_viridis(direction = -1, discrete=TRUE, name ="Land Cover\nChange") +
labs(title = "Land Cover Change, 2011-2021") +
mapTheme +
theme(legend.direction="horizontal")
lc_2011 <- raster("/Users/luyiiwong/Documents/GitHub/LandUseModeling_HW5/Data/lc_nj_msa_2011.tif.aux/lc_nj_msa_2011.tif")
lc_2021 = raster("/Users/luyiiwong/Documents/GitHub/LandUseModeling_HW5/Data/nlcd_2021_landcover.tif.aux/nlcd_2021_landcover.tif")
reclassMatrix <-
matrix(c(
0,12,0,
12,24,1,
24,Inf,0),
ncol=3, byrow=T)
developed_2001 <-
reclassify(lc_2001,reclassMatrix)
developed_2011 <-
reclassify(lc_2011,reclassMatrix)
developed_2021 <-
reclassify(lc_2021,reclassMatrix)
development_change <- developed_2001+developed_2011
development_change <- developed_2011+developed_2021
# Resample the developed_2021 raster to match the resolution of developed_2011
developed_2021_resampled <- resample(developed_2021, developed_2011)
# Perform the calculation
development_change <- developed_2011 + developed_2021_resampled
hist(development_change)
development_change[development_change != 1] <- NA
ggplot() +
geom_sf(data=houstonMSA) +
geom_raster(data=rast(development_change) %>% na.omit,
aes(x,y,fill=as.factor(value))) +
scale_fill_viridis(discrete=TRUE, name ="Land Cover/nChange") +
labs(title="Development land use change") +
mapTheme
development_change[development_change != 1] <- NA
ggplot() +
geom_sf(data=njMSA) +
geom_raster(data=rast(development_change) %>% na.omit,
aes(x,y,fill=as.factor(value))) +
scale_fill_viridis(discrete=TRUE, name ="Land Cover/nChange") +
labs(title="Development land use change") +
mapTheme
development_change
aggregate(development_change, fact = 2)
aggregate(development_change, fact = 10)
aggregate(development_change, fact = 20)
freq(developed_2021)
freq(development_change)
ggplot() +
geom_sf(data=njMSA) +
geom_raster(data=rast(development_change) %>% na.omit,
aes(x,y,fill=as.factor(value))) +
scale_fill_viridis(discrete=TRUE, name ="Land Cover\nChange") +
labs(title="Development Land Use Change") +
mapTheme
njMSA_fishnet <-
st_make_grid(njMSA, 8000) %>%
st_sf()
njMSA_fishnet <-
njMSA_fishnet[njMSA,]
ggplot() +
geom_sf(data=njMSA_fishnet) +
labs(title="Fishnet, 8000 Foot Resolution") +
mapTheme
changePoints <-
rasterToPoints(development_change) %>%
as.data.frame() %>%
st_as_sf(coords = c("x", "y"), crs = st_crs(njMSA_fishnet))
fishnet <-
aggregate(changePoints, njMSA_fishnet, sum) %>%
mutate(development_change = ifelse(is.na(development_change),0,1),
development_change = as.factor(development_change))
# Dependent Variable ####
## Read in csv data 2011 weather ####
temp_2021 <- read.csv("PHL_maxtemp_2011.csv")
library(tidycensus)
library(tidyverse)
library(viridis)
library(ggplot2)
library(sf)
# Setup ####
setwd("/Users/luyiiwong/Documents/GitHub/PlanningbyNumbers/Finalproject")
# Dependent Variable ####
## Read in csv data 2011 weather ####
temp_2021 <- read.csv("PHL_maxtemp_2011.csv")
View(temp_2021)
install.packages("mapview")
install.packages("mapview")
install.packages("mapview")
install.packages("mapview")
library(mapview)
# Dependent Variable ####
## Read in csv data 2011 weather ####
temp_2021 <- read.csv("PHL_maxtemp_2011.csv")
View(temp_2021)
mapview(temp_2011, xcol= "Logitude", ycol= "Latitude", crs = 4269, grid = FALSE)
# Dependent Variable ####
## Read in csv data 2011 weather ####
temp_2011 <- read.csv("PHL_maxtemp_2011.csv")
mapview(temp_2011, xcol= "Logitude", ycol= "Latitude", crs = 4269, grid = FALSE)
# Dependent Variable ####
## Read in csv data 2011 weather ####
temp_2011 <- read.csv("PHL_maxtemp_2011.csv") %>%
as.double(Latitude) %>%
as.double(Longitute)
# Dependent Variable ####
## Read in csv data 2011 weather ####
temp_2011 <- read.csv("PHL_maxtemp_2011.csv") %>%
as.double(Latitude) %>%
as.double(Longitute)
library(tidycensus)
library(tidyverse)
library(viridis)
library(ggplot2)
library(sf)
library(mapview)
# Dependent Variable ####
## Read in csv data 2011 weather ####
temp_2011 <- read.csv("PHL_maxtemp_2011.csv") %>%
as.double(Latitude) %>%
as.double(Longitute)
# Dependent Variable ####
## Read in csv data 2011 weather ####
temp_2011 <- read.csv("PHL_maxtemp_2011.csv") %>%
as.double(Latitude) %>%
as.double(Longitude)
# Dependent Variable ####
## Read in csv data 2011 weather ####
temp_2011 <- read.csv("PHL_maxtemp_2011.csv")
temp_2011 <- as.double(temp_2011$Latitude)
temp_2011 <-as.double(temp_2011$Longitude)
temp_2011 <- as.double(temp_2011$Latitude)
temp_2011 <- temp_2011 %>%
as.double(Latitude)
Latitude <- as.double(temp_2011$Latitude)
temp_2011$Latitude <- as.double(temp_2011$Latitude)
temp_2011 <- as.double(temp_2011)
temp_2011 <- temp_2011 %>%
mutate(Latitude = as.double(Latitude),
Longitude = as.double(Longitude))
install.packages("rjson")
library("rjson")
heat_watch_2022 <- "r3dp9-datacite.json"
weather.Panel <-
riem_measures(station = "PHL", date_start = "2011-07-23", date_end = "2011-07-24") %>%
dplyr::select(valid, tmpf)%>%
replace(is.na(.), 0) %>%
mutate(interval60 = ymd_h(substr(valid,1,13))) %>%
mutate(dotw = wday(interval60, label=TRUE)) %>%
group_by(interval60) %>%
summarize(Temperature = max(tmpf)) %>%
mutate(Temperature = ifelse(Temperature == 0, 42, Temperature))
library(riem)
weather.Panel <-
riem_measures(station = "PHL", date_start = "2011-07-23", date_end = "2011-07-24") %>%
dplyr::select(valid, tmpf)%>%
replace(is.na(.), 0) %>%
mutate(interval60 = ymd_h(substr(valid,1,13))) %>%
mutate(dotw = wday(interval60, label=TRUE)) %>%
group_by(interval60) %>%
summarize(Temperature = max(tmpf)) %>%
mutate(Temperature = ifelse(Temperature == 0, 42, Temperature))
View(weather.Panel)
weather.Panel.PNE <-
riem_measures(station = "PNE", date_start = "2011-07-23", date_end = "2011-07-24") %>%
dplyr::select(valid, tmpf)%>%
replace(is.na(.), 0) %>%
mutate(interval60 = ymd_h(substr(valid,1,13))) %>%
mutate(dotw = wday(interval60, label=TRUE)) %>%
group_by(interval60) %>%
summarize(Temperature = max(tmpf)) %>%
mutate(Temperature = ifelse(Temperature == 0, 42, Temperature))
View(weather.Panel.PNE)
View(weather.Panel)
weather.Panel.PHL <-
riem_measures(station = "PHL", date_start = "2011-07-23", date_end = "2011-07-24") %>%
dplyr::select(valid, tmpf)%>%
replace(is.na(.), 0) %>%
mutate(interval60 = ymd_h(substr(valid,1,13))) %>%
mutate(dotw = wday(interval60, label=TRUE)) %>%
group_by(interval60) %>%
summarize(Temperature.PHL = max(tmpf)) %>%
mutate(Temperature.PHL = ifelse(Temperature.PHL == 0, 42, Temperature.PHL))
View(weather.Panel.PNE)
View(weather.Panel.PHL)
weather.Panel.PNE <-
riem_measures(station = "PNE", date_start = "2011-07-23", date_end = "2011-07-24") %>%
dplyr::select(valid, tmpf)%>%
replace(is.na(.), 0) %>%
mutate(interval60 = ymd_h(substr(valid,1,13))) %>%
mutate(dotw = wday(interval60, label=TRUE)) %>%
group_by(interval60) %>%
summarize(Temperature.PNE = max(tmpf)) %>%
mutate(Temperature.PNE = ifelse(Temperature == 0, 42, Temperature.PNE))
weather.Panel.PNE <-
riem_measures(station = "PNE", date_start = "2011-07-23", date_end = "2011-07-24") %>%
dplyr::select(valid, tmpf)%>%
replace(is.na(.), 0) %>%
mutate(interval60 = ymd_h(substr(valid,1,13))) %>%
mutate(dotw = wday(interval60, label=TRUE)) %>%
group_by(interval60) %>%
summarize(Temperature.PNE = max(tmpf)) %>%
mutate(Temperature.PNE = ifelse(Temperature.PNE == 0, 42, Temperature.PNE))
weather.Panel.LOM <-
riem_measures(station = "LOM", date_start = "2011-07-23", date_end = "2011-07-24") %>%
dplyr::select(valid, tmpf)%>%
replace(is.na(.), 0) %>%
mutate(interval60 = ymd_h(substr(valid,1,13))) %>%
mutate(dotw = wday(interval60, label=TRUE)) %>%
group_by(interval60) %>%
summarize(Temperature.LOM = max(tmpf)) %>%
mutate(Temperature.LOM = ifelse(Temperature.LOM == 0, 42, Temperature.LOM))
View(weather.Panel.LOM)
## Combine weather data ####
comb_temp_2011 <- merge(weather.Panel.LOM, weather.Panel.PHL, by = "interval60")
View(comb_temp_2011)
comb_temp_2011 <- merge(comb_temp_2011, weather.Panel.PNE, by = "interval60")
View(comb_temp_2011)
